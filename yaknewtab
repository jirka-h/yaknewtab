#!/usr/bin/env bash
# =============================================================================
# Title:                    yaknewtab
# Description:              POSIX shell script to open new tabs/sessions in
#                           KDE terminal emulator Yakuake via D-Bus
# Author:                   Peter J. Mello
# Date:                     2019-06-19
# Version:                  0.2
# Usage:                    yaknewtab [options] [arguments]
# Notes:                    All efforts were made to maximize portability for
#                           use with any POSIX-compliant shell while permitting
#                           use with non-compliant shells (e.g. fish)
# Bash Version:             5.0.3
# SPDX-License-Identifier:  GPL-3.0-or-later
# =============================================================================
# yaknewtab - A POSIX shell script to create new Yakuake tabs (a.k.a. sessions)
#
# Copyright © 2010-2018 Jesús Torres <jmtorres@ull.es>.
#           © 2019 Peter J. Mello <admin@petermello.net>.
#
# This program is free software: you can redistribute it and/or modify it under
#     the terms of the GNU General Public License as published by the Free
#     Software Foundation, either version 3 of the License, or (at your option)
#     any later version.
#
#     This program is distributed in the hope that it will be useful, but 
#     WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
#     Public License for more details.
#
#     You should have received a copy of the GNU General Public License along
#     with this program. If not, see <https://www.gnu.org/licenses/>.
# =============================================================================


# Set to 1 to override the fish shell autodetection
FISH_SHELL=
if [ -z "$FISH_SHELL" ]; then
  [[ "$SHELL" == */fish ]] && FISH_SHELL=1 || FISH_SHELL=0
fi

### Utility functions
# A few utility functions to show errors, handle programa exit and more

PROGRAM_NAME="$(basename "$0")"
DEBUG=

# Show information about how to use this program
show_help() {
  cat <<-"EOF"

    Usage: "$PROGRAM_NAME" [options] [args]

      Options:
          -q                      Keep the Yakuake window hidden
          -e <cmd>                Command(s) to execute; this flag will catch all subsequent arguments, so must be called last
          -t <title>              Set <title> as the title of the new tab
          -p <property=value>     Change the value of a profile property (only for KDE 4)
          -h, --homedir           Open a new tab with '$HOME' as the working directory
          -w, --workdir <dir>     Open a new tab with <dir> as the working directory
          --hold, --noclose       Do not close the session automatically when the command ends
          --fish | --nofish       Manually enable or disable the fish shell autocompletion support
          --debug                 Redirect script debugging output to the console
          --help                  Print this message

      Arguments:
          args                    Arguments passed to command from '-e' flag
EOF
}

# Functions to show error and warning messages
if type -P kdialog &>/dev/null; then

  error_exit() {
    kdialog ${WINDOWID:+--attach $WINDOWID} --title "$PROGRAM_NAME error" --error "${2:-'unkshown error'}."
    exit "${1:-1}"
  }

  warning() {
    kdialog ${WINDOWID:+--attach $WINDOWID} --title "$PROGRAM_NAME warning" --sorry "${1:-'unkshown error'}"
  }

  debug() {
    if [ -n "$DEBUG" ]; then
      kdialog ${WINDOWID:+--attach $WINDOWID} --title "$PROGRAM_NAME debug" --warningcontinuecancel "${1:-$(cat)}" || exit 120
    fi
  }

else

  error_exit() {
    echo "$PROGRAM_NAME: error: ${2:-'unkshown error'}" 1>&2
    exit "${1:-1}"
  }

  warning() {
    echo "$PROGRAM_NAME: warning: ${1:-'unkshown error'}" 1>&2
  }

  debug() {
    if [ -n "$DEBUG" ]; then
      echo "$PROGRAM_NAME: debug: ${1:-$(cat)}" 1>&2
    fi
  }
fi

### Profile setup
# Functions to handle terminal profile properties and setup
# them in the new session.

profile_properties=''

add_profile_setting() {
  if [ -z "$profile_properties" ]; then
    profile_properties="$1"
  else
    profile_properties="$profile_properties;$1"
  fi
}

profile_setup_command() {
  type -P konsoleprofile &>/dev/null || echo 'true'
  if [ -n "$profile_properties" ]; then
    echo "konsoleprofile '$profile_properties'"
  else
    echo 'true'
  fi
}

### Yakuake IPC
# Functions to make it easy to invoke some Yakuake methods

detect_dbus_cmd() {
  if type -P qdbus &>/dev/null; then
    echo qdbus
    return
  fi
  if type -P qdbus-qt5 &>/dev/null; then
    echo qdbus-qt5
    return
  fi
}

# Detect which IPC technology we have to use to talk to Yakuake
detect_ipc_interface() {
  if type -P "$dbus_cmd" &>/dev/null && "$dbus_cmd" 2>/dev/null | grep -q org.kde.yakuake; then
    echo dbus
    return
  fi
  if type -P dcop &>/dev/null && dcop 2>/dev/null | grep -q yakuake; then
    echo dcop
    return
  fi
  echo none
}

# Initialize IPC interface to Yakuake
init_ipc_interface() {
  typeset comm
  comm="$(detect_ipc_interface)"
  debug "Detected IPC interface: $comm"
  if [ "$comm" == none ]; then
    # Maybe Yakuake is not running. Launch de program and try it again
    type -P yakuake &>/dev/null || error_exit 20 "Yakuake is not installed"
    yakuake &>/dev/null || error_exit 126 "Yakuake can not be executed: exit with status $?"
    comm=$(detect_ipc_interface)
  fi
  if [ "$comm" == dbus ]; then
    type -P wmctrl &>/dev/null || error_exit 21 "wmctrl is not installed"

    yakuake_addsession() {
      "$dbus_cmd" org.kde.yakuake /yakuake/sessions addSession >/dev/null
    }

    yakuake_runcommand() {
      "$dbus_cmd" org.kde.yakuake /yakuake/sessions runCommand "$1" > /dev/null
    }

    yakuake_settitle() {
      typeset id
      id="$("$dbus_cmd" org.kde.yakuake /yakuake/sessions sessionIdList | tr , "\\n" | sort -g | tail -1 | tr -d '\n')"
      "$dbus_cmd" org.kde.yakuake /yakuake/tabs setTabTitle "$id" "$1"
    }

    yakuake_showwindow() {
      typeset wid
      wid=$(wmctrl -xl | grep -iF 'yakuake.yakuake' | head -n1 | cut -d' ' -f1)
      if [ -z "$wid" ]; then
        "$dbus_cmd" org.kde.yakuake /yakuake/window toggleWindowState >/dev/null
      else
        wmctrl -i -a "$wid"
      fi
    }

  elif [ "$comm" == dcop ]; then

    yakuake_addsession() {
      dcop yakuake DCOPInterface slotAddSession >/dev/null
    }

    yakuake_runcommand() {
      typeset rc_status
      rc_status=0
      dcop yakuake DCOPInterface slotRunCommandInSession "$1" >/dev/null || rc_status=1
      return "$rc_status"
    }

    yakuake_settitle() {
      warning "setting tab title is not supported by DCOP interface"
    }

    yakuake_showwindow() {
      ws="$(dcop yakuake 'yakuake-mainwindow#1' visible)"
      if [ "$rc_status" == 0 ] && [ "$ws" == false ]; then
        dcop yakuake DCOPInterface slotToggleState >/dev/null
      fi
    }

  else
    error_exit 22 "cannot connect to Yakuake"
  fi
}

### Main function

main() {
  typeset cwd
  cwd="$PWD"
  typeset title
  title=''
  typeset cmd
  cmd=''
  typeset -i hold
  hold=0
  typeset -i show
  show=1

  # Parse command line options
  typeset option
  option=''
  typeset -i OPTIND
  OPTIND=1
  typeset OPTARG
  OPTARG=''

  while getopts ":-:t:p:w:he:q" option; do
    case $option in
      -)
        case "$OPTARG" in
          help)
            show_help
            exit 0
            ;;
          homedir)
            cwd="$HOME"
            ;;
          workdir)
            cwd="${!OPTIND}"
            [[ "$cwd" == -* ]] && error_exit 1 "missing argument for option '$OPTARG'."
            OPTIND+=1
            ;;
          workdir=*)
            cwd="${OPTARG#*=}"
            ;;
          hold | noclose)
            hold=1
            ;;
          fish)
            FISH_SHELL=1
            ;;
          nofish)
            FISH_SHELL=0
            ;;
          debug)
            DEBUG=1
            ;;
          *)
            error_exit 1 "unkshown option '$OPTARG'."
            ;;
        esac
        ;;
      p)
        add_profile_setting "$OPTARG"
        ;;
      e)
        shift $((OPTIND - 2))
        cmd=$(printf '%q ' "$@")
        break
        ;;
      t)
        title="$OPTARG"
        ;;
      h)
        cwd="$HOME"
        ;;
      w)
        cwd="${OPTARG#*=}"
        ;;
      q)
        show=0
        ;;
      \?)
        error_exit 1 "unkshown option '$OPTARG'."
        ;;
      :)
        error_exit 1 "missing argument for option '$OPTARG'."
        ;;
    esac
  done

  debug <<-EOF
    Command line options parsed:

        PROGRAM_NAME=$PROGRAM_NAME
        DEBUG=$DEBUG
        FISH_SHELL=$FISH_SHELL

        title=$title
        cwd=$cwd
        hold=$hold
        show=$show
EOF

  if [ -n "$cwd" ] && [ ! -d "$cwd" ]; then
    error_exit 2 "working directory does not exist"
  fi

  # Escape working directory path
  cwd=$(printf %q "$cwd")
  debug "Working directory checked: cwd=$cwd"

  if [ -n "$cmd" ]; then
    if [ "$hold" == 0 ]; then
      cmd="exec $cmd"
    fi
  else
    cmd='true'
  fi
  debug "Command checked: cmd=$cmd"

  typeset dbus_cmd
  dbus_cmd="$(detect_dbus_cmd)"
  init_ipc_interface "$dbus_cmd"

  # Create a new terminal session in Yakuake
  yakuake_addsession >/dev/null || error_exit 4 'cannot create a new session in Yakuake'

  # Setup the session
  if [ "$FISH_SHELL" == 1 ]; then
    AND_OP='; and'
  else
    AND_OP='&&'
  fi

  SESSION_FILE="$(mktemp --tmpdir "$PROGRAM_NAME-XXXXXXXXXX")"
  cat >"$SESSION_FILE" <<-EOF
    clear
    rm -f '$SESSION_FILE' 2>/dev/null
    $(profile_setup_command)
    cd $cwd $AND_OP $cmd
EOF

  debug <<-EOF
    Session file: $SESSION_FILE

    $(cat "$SESSION_FILE")
EOF

  # We use source builtin instead of '.' because of fish shell and
  # we put a space before to exclude it from history.
  yakuake_runcommand " source '$SESSION_FILE'" || error_exit 7 'cannot run a command inside the new session'

  # Overwrite session title after run command
  if [ -n "$title" ]; then
    yakuake_settitle "$title"
  fi

  # Show the window of Yakuake
  if [ "$show" == 1 ]; then
    yakuake_showwindow
  fi
}

# Detect if the script was called with a different user who logged in
logged_user=$(logname)
if [ "$UID" == 0 ] && [ "$logged_user" != "$USER" ]; then
  su "$logged_user" -c "$0" "$@" -- "$0" "$@"
else
  main "$@"
fi
